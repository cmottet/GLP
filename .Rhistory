}
(trainWindow + trainFourierLength)[1]
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
k
trainFourier
filteredFourier <- filterFourierCoefficients(trainFourier$valueMean, k = k )
fourierPred <- with(filteredFourier, buildSignal(trainFourierLength + 1:(2*trainFourierLength), cn, f ))
testFourier$t
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[trainWindow + trainFourierLength] <- testFourier$valueMean - fourierPred
trainingData$fourierPrediction[trainWindow + trainFourierLength] <- fourierPred
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(trainFourier$valueMean, k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[trainWindow + trainFourierLength] <- testFourier$valueMean - fourierPred
testFourier$valueMean
testFourier$valueMean - fourierPred
ormattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
fourierResiduals = NA,
fourierPrediction = NA,
t = 1:nrow(trainingData))
trainWindow <- 1:trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(trainFourier$valueMean, k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- testFourier$valueMean - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
plot(trainingData$valueMean);lines(trainingData$fourierPrediction, col = "red")
plot <- ggplot(trainingData, aes(ddtm, valueMean)) + geom_line() + geom_line(aes(ddtm, fourierPred), colour = "green")
plot <- ggplot(trainingData, aes(ddtm, valueMean)) + geom_line() + geom_line(aes(ddtm, fourierPred), colour = "green")
library(ggplot2)
plot <- ggplot(trainingData, aes(ddtm, valueMean)) + geom_line() + geom_line(aes(ddtm, fourierPred), colour = "green")
plot
plot <- ggplot(trainingData, aes(dttm, valueMean)) + geom_line() + geom_line(aes(dttm, fourierPred), colour = "green")
plot
plot <- ggplot(trainingData, aes(dttm, valueMean)) + geom_line() + geom_line(data = trainingData,aes(dttm, fourierPred), colour = "green")
plot
plot <- ggplot(trainingData, aes(dttm, valueMean)) + geom_line()
plot
plot <- ggplot(trainingData, aes(dttm, valueMean)) + geom_line()  + geom_line(data = trainingData,aes(dttm, fourierPredictionPred), colour = "green")
plot
plot <- ggplot(trainingData, aes(dttm, valueMean)) + geom_line()  + geom_line(data = trainingData,aes(dttm, fourierPrediction), colour = "green")
plot
ggplot(plot)
library(plotly)
ggplotly(plot)
plot <- ggplot(trainingData, aes(dttm, fourierResiduals)) + geom_line()
plot
trainWindow <- 1:trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(log(trainFourier$valueMean), k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- log(testFourier$valueMean) - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
plot <- ggplot(trainingData, aes(dttm, fourierResiduals)) + geom_line()
plot
model <- lm(logDemand ~ fourierResiduals + tempBin:temperature + Holiday, data = trainingData)
model <- lm(fourierResiduals ~  tempBin:temperature + Holiday, data = trainingData)
model
summary(model)
ggplot(trainingData, aes(temperature, fourierResiduals)) + geom_line()
ggplot(trainingData, aes(temperature, fourierResiduals, colour = Holiday)) + geom_line()
ggplot(trainingData, aes(temperature, fourierResiduals, colour = Holiday)) + geom_point()
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(trainFourier$valueMean, k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- testFourier$valueMean - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
# logDemand <- f
ggplot(trainingData, aes(temperature, fourierResiduals, colour = Holiday)) + geom_point()
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
fourierResiduals = NA,
fourierPrediction = NA,
t = 1:nrow(trainingData))
trainWindow <- 1:trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(trainFourier$valueMean, k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- testFourier$valueMean - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
model <- lm(fourierResiduals ~  tempBin:temperature + Holiday, data = trainingData)
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
fourierResiduals = NA,
fourierPrediction = NA,
t = 1:nrow(trainingData))
trainWindow <- 1:trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(trainFourier$valueMean, k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- testFourier$valueMean - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
ggplot(trainingData, aes(temperature, fourierResiduals, colour = Holiday)) + geom_point()
# logDemand <- forecast::msts(log(trainingData$valueMean + 1), seasonal.periods)
# model <- forecast::tslm(logDemand ~ forecast::fourier(logDemand, K=K) + tempBin:temperature + Holiday, data = trainingData)
model <- lm(fourierResiduals ~   day + temperature + tempBin:temperature + Holiday, data = trainingData)
summary(model)
# logDemand <- forecast::msts(log(trainingData$valueMean + 1), seasonal.periods)
# model <- forecast::tslm(logDemand ~ forecast::fourier(logDemand, K=K) + tempBin:temperature + Holiday, data = trainingData)
model <- lm(fourierResiduals ~   day + temperature + tempBin:temperature + Holiday, data = trainingData, shape = "da")
ggplot(trainingData, aes(temperature, fourierResiduals, colour = day, shape = Holiday)) + geom_point()
acf(trainingData$fourierResiduals)
acf(na.omit(trainingData$fourierResiduals))
# logDemand <- forecast::msts(log(trainingData$valueMean + 1), seasonal.periods)
# model <- forecast::tslm(logDemand ~ forecast::fourier(logDemand, K=K) + tempBin:temperature + Holiday, data = trainingData)
model <- lm(fourierResiduals ~   hour + day + temperature + tempBin:temperature + Holiday, data = trainingData)
model
summary(model)
ggplot(trainingData, aes(temperature, fourierResiduals, colour = day, shape = Holiday)) + geom_point()
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
fourierResiduals = NA,
fourierPrediction = NA,
t = 1:nrow(trainingData))
trainWindow <- 1:trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k = 1:50)
filteredFourier <- filterFourierCoefficients(log(trainFourier$valueMean + 1), k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- log(testFourier$valueMean + 1) - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
ggplot(trainingData, aes(temperature, fourierResiduals, colour = day, shape = Holiday)) + geom_point()
exp(0.5)
ggplot(trainingData, aes(dttm, fourierResiduals, colour = day, shape = Holiday)) + geom_point()
ggplot(trainingData, aes(dttm, fourierResiduals, colour = day, shape = Holiday)) + geom_line()
ggplot(trainingData, aes(dttm, fourierResiduals, colour = day, shape = Holiday)) + geom_path()
ggplot(trainingData, aes(dttm, fourierResiduals, colour = Holiday)) + geom_path()
ggplot(trainingData, aes(dttm, fourierResiduals, colour = Holiday)) + geom_line()
plot <- ggplot(trainingData, aes(dttm, fourierResiduals)) + geom_line()
ggplotly(plot)
plot <- ggplot(trainingData, aes(dttm, fourierResiduals)) + geom_line() + geom_point(data = filter(trainingData, Holiday != 0), aes(dttm,fourierResiduals ), colour = "pink")
plot
model <- lm(fourierResiduals ~   day + temperature + tempBin:temperature + Holiday, data = trainingData)
model
summary(model)
model <- lm(fourierResiduals ~   day + temperature + Holiday, data = trainingData)
summary(model)
model <- lm(fourierResiduals ~   day + tempBin + Holiday, data = trainingData)
summary(model)
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
fourierResiduals = NA,
fourierPrediction = NA,
t = 1:nrow(trainingData))
trainWindow <- 1:trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
while((trainWindow + trainFourierLength)[1] <= nrow(trainingData)){
k <- chooseBestkFourier(trainFourier, testFourier, k)
filteredFourier <- filterFourierCoefficients(log(trainFourier$valueMean + 1), k = k )
fourierPred <- with(filteredFourier, buildSignal(testFourier$t, cn, f ))
trainingData$fourierResiduals[testFourier$t] <- log(testFourier$valueMean + 1) - fourierPred
trainingData$fourierPrediction[testFourier$t] <- fourierPred
trainWindow <-  trainWindow + trainFourierLength
trainFourier <- slice(trainingData, trainWindow)
testFourier <- slice(trainingData, trainWindow + trainFourierLength)
}
# logDemand <- forecast::msts(log(trainingData$valueMean + 1), seasonal.periods)
# model <- forecast::tslm(logDemand ~ forecast::fourier(logDemand, K=K) + tempBin:temperature + Holiday, data = trainingData)
model <- lm(fourierResiduals ~   day + tempBin + Holiday, data = trainingData)
summary(model)
plot <- ggplot(trainingData, aes(dttm, fourierResiduals)) + geom_line() + geom_point(data = filter(trainingData, Holiday != 0), aes(dttm,fourierResiduals ), colour = "pink")
plot
seq(1,nrow(trainData), by = 7*24*2)
seq(1,nrow(trainingData), by = 7*24*2)
exp(0.5)
nrow(trainingData)
seq(1,nrow(trainingData), by = 7*24*2)
?seq
union(1,2)
union(1,1)
cutPoints <- union(seq(1,nrow(trainingData), by = 7*24*2), nrow(trainingData))
cutPoints
7*24*2
cutPoints <- union(seq(1,nrow(trainingData), by = 7*24*2), nrow(trainingData))
trainWindow <- lapply(cutPoints, function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
length(trainWindow)
length(cutPoints)
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainWindow <- lapply(cutPoints, function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
cutPoints <- union(seq(1,nrow(trainingData), by = 7*24*2), nrow(trainingData))
trainWindow <- lapply(cutPoints, function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
trainWindow[[25]]
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainWindow <- lapply(cutPoints, function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
cutPoints
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainWindow <- lapply(cutPoints, function(x) slice(trainingData, x:(x+trainFourierLength - 1)))[-length(cutPoints)]
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainWindow <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainWindow <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testWindow <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogfourierResiduals = NA,
LogfourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainData <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testData <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
for (i in 1:length(trainData){
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
t <- testFourier$t
fourierPred <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$fourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - fourierPred
trainingData$fourierPrediction[t] <- fourierPred
}
for (i in 1:length(trainData)){
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
t <- testFourier$t
fourierPred <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$fourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - fourierPred
trainingData$fourierPrediction[t] <- fourierPred
}
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogfourierResiduals = NA,
LogfourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainData <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testData <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogfourierResiduals = NA,
LogfourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainData <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testData <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
for (i in 1:length(trainData)){
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
t <- testFourier$t
fourierPred <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$fourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - fourierPred
trainingData$fourierPrediction[t] <- fourierPred
}
data <- site5
Ntrain <- round(0.9*nrow(data))
library(GLP)
trainingData <- dplyr::slice(data,1:Ntrain)
tzone = "UTC"
deltaT = 5
fullDaysOnly = F
completeRows = F
fitModelFourier <- function(data, tzone,deltaT, fullDaysOnly = F, completeRows = F, trainFourierLength = 7*24*2){
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogfourierResiduals = NA,
LogfourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- seq(1,nrow(trainingData), by = 7*24*2)
trainData <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testData <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
for (i in 1:length(trainData)){
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
t <- testFourier$t
fourierPred <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$fourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - fourierPred
trainingData$fourierPrediction[t] <- fourierPred
}
# logDemand <- forecast::msts(log(trainingData$valueMean + 1), seasonal.periods)
# model <- forecast::tslm(logDemand ~ forecast::fourier(logDemand, K=K) + tempBin:temperature + Holiday, data = trainingData)
model <- lm(fourierResiduals ~  day + tempBin + Holiday, data = trainingData)
output <- list(model = model, response = logDemand, trainFourierLength)
class(output) <- "FourierModel"
return(output)
}
fitModelFourier(data, tzone,deltaT = 10, trainFourierLength = 7*24*2)
fourierModel <- fitModelFourier(trainingData, tzone,deltaT = 10, trainFourierLength = 7*24*2)
library(GLP)
data <- site5
Ntrain <- round(0.9*nrow(data))
trainingData <- dplyr::slice(data,1:Ntrain)
tzone = "UTC"
deltaT = 5
fullDaysOnly = F
completeRows = F
fourierModel <- fitModelFourier(trainingData, tzone,deltaT = 10, trainFourierLength = 7*24*2)
devtools::Document()
devtools::document()
library(GLP)
fourierModel <- fitModelFourier(trainingData, tzone,deltaT = 10, trainFourierLength = 7*24*2)
debugonce(fitModelFourier)
fourierModel <- fitModelFourier(trainingData, tzone,deltaT = 10, trainFourierLength = 7*24*2)
remove(list=ls())
data <- site5
Ntrain <- round(0.9*nrow(data))
tzone = "UTC"
fullDaysOnly = F
trainingData <- dplyr::slice(data,1:Ntrain)
deltaT = 5
library(GLP)
completeRows = F
fourierModel <- fitModelFourier(trainingData, tzone,deltaT = 10, trainFourierLength = 7*24*2)
library(GLP)
data <- site5
Ntrain <- round(0.9*nrow(data))
trainingData <- dplyr::slice(data,1:Ntrain)
tzone = "UTC"
deltaT = 5
fullDaysOnly = F
completeRows = F
fourierModel <- fitModelFourier(trainingData, tzone,deltaT = 10, trainFourierLength = 7*24*2)
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogFourierResiduals = NA,
LogFourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- rev(seq(nrow(trainingData),1, by = 7*24*2))
rev(seq(nrow(trainingData),1, by = -trainFourierLength))
trainFourierLength = 7*24*2
rev(seq(nrow(trainingData),1, by = -trainFourierLength))
for (i in 1:length(trainData)){
print(k)
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
t <- testFourier$t
predictions <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$LogFourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - predictions
trainingData$LogFourierPrediction[t] <- predictions
}
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogFourierResiduals = NA,
LogFourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- rev(seq(nrow(trainingData),1, by = -trainFourierLength))
trainData <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testData <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
for (i in 1:length(trainData)){
print(k)
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
t <- testFourier$t
predictions <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$LogFourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - predictions
trainingData$LogFourierPrediction[t] <- predictions
}
for (i in 1:length(trainData)){
k <- chooseBestkFourier(trainData[[i]], testData[[i]], k)
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
print(k)
t <- testFourier$t
predictions <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$LogFourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - predictions
trainingData$LogFourierPrediction[t] <- predictions
}
formattedData <- formatData(data, tzone,deltaT, fullDaysOnly = fullDaysOnly, completeRows = completeRows)
trainingData <- transform(formattedData,
tempBin = as.factor(tempBin),
hour = as.factor(hour),
month = as.factor(month),
year = as.factor(year),
Holiday = as.factor(Holiday),
day = as.factor(day),
mday = as.factor(mday),
Time = 1:nrow(formattedData),
LogFourierResiduals = NA,
LogFourierPrediction = NA,
t = 1:nrow(trainingData))
cutPoints <- rev(seq(nrow(trainingData),1, by = -trainFourierLength))
trainData <- lapply(cutPoints[-length(cutPoints)], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
testData <- lapply(cutPoints[-1], function(x) slice(trainingData, x:(x+trainFourierLength - 1)))
for (i in 1:length(trainData)){
k <- chooseBestkFourier(trainData[[i]], testData[[i]])
filteredFourier <- filterFourierCoefficients(log(trainData[[i]]$valueMean + 1), k = k )
print(k)
t <- testFourier$t
predictions <- with(filteredFourier, buildSignal(t, cn, f ))
trainingData$LogFourierResiduals[t] <- log(testData[[i]]$valueMean + 1) - predictions
trainingData$LogFourierPrediction[t] <- predictions
}
# logDemand <- fo
k <- chooseBestkFourier(trainData[[i]], testData[[i]])
chooseBestkFourier()
chooseBestkFourier
