plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
ggsave(plot, file = "pics/Figure3.pdf", width = 10,height = 5,dpi=300)
convexData <- subset(Data, (!m3) & (!m2) & (m1) & (!m0))
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
convexData <- subset(Data, (!m3) & (!m2) & (!m1) & (m0))
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
convexData <- subset(Data, (!m3) & (!m2) & (!m1) & (!m0))
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
library(latex2exp)
library(ggplot2)
library(magrittr)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- optim[-which(apply(optim, 1, function(x)all(is.na(x)))),]
J1 <- 0:3
J2 <- 3:1
NJ1 <- length(J1)+1 # To account for 0
NJ2 <- length(J2)-1
N <- NJ1 + NJ2
ParamNames <- names(optim)[1:N]
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[,(NJ2+1):N])==0,
J2empty = rowSums(optim[,1:NJ1])==0,
RelErr = with(optim,apply((cbind(lB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(optim[,1:NJ2]) >= 1,
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
# Comparing to previous paper approach
# Lam H, Mottet C (2017) Tail analysis without parametric models: A worst-case perspective. Operations
# Research https://doi.org/10.1287/opre.2017.1643.
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
###
### Plot Figure 3
###
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
# geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
ggsave(plot, file = "pics/Figure3.pdf", width = 10,height = 5,dpi=300)
###
### Get best subsets J1* and J2*
###
library(plyr)
Table <- ddply(Data, .(P,D), .fun = function(x){
index_min <- which.min(x$RelErr)
row_min <- x[index_min, ]
J2_star <- J2[unlist(row_min[1:length(J2)])] %>% toString()
J1_star <- J1[unlist(row_min[length(J2) + 1:length(J1)])] %>% toString()
if (length(J2_star) ==0) J2_star = ' '
if (length(J1_star) ==0) J2_star = ' '
Z_star <- format(min(row_min$uB,row_min$lB), scientific=TRUE, digits =3)
data.frame(J1 = paste0("{",J1_star,"}"), J2 = paste0("{",J2_star,"}"), Z_star, row_min$RelErr)
})
Table$P <- Table$P*100
names(Table) <- c("P", "D", "J1", "J2","Optimal Objective Value", "Relative Error")
# Create the LaTex Tables
library(xtable)
library(dplyr)
display <- c(rep("d",4), "s","E")
for (p in P*100){
file <- paste0("tables/Transformed_Hill_Horror_TailProb_best_",p,".tex")
table <- subset(Table, p == P)%>% select(-P)
align  <- c(rep("|c",ncol(table)+1),"|")
xtable(table, align = align, digits = 3) %>% print(include.rownames=FALSE, type = "latex",file = file)
# We need to replace the tables by subtables (our way around uses unix commands)
command_1 <- paste0("sed -i '' -- 's/begin{table}\\[ht\\]/begin{subtable}{\\\\textwidth}/g' ",file)
system(command_1)
command_2 <- paste0("sed -i '' -- 's/end{table}/end{subtable}/g' ",file)
system(command_2)
# We need to add the subcaption to the subtables (our way around uses unix commands)
command_3 <- paste0("sed -i '' -- 's/D \\& J1 \\& J2/\\$D\\$ \\& \\$\\\\mathcal J\\_1\\^\\*\\$ \\& \\$\\\\mathcal J\\_2\\^\\*\\$/g' ",file)
system(command_3)
# Make the right column names
command_4 <- paste0("sed -i '' -- 's/end{tabular}/end{tabular}\\\\subcaption{$p = ",p," $}/g' ",file)
system(command_4)
}
head(Data)
NJ1
N
optim <- optim[-which(apply(optim, 1, function(x)all(is.na(x)))),]
J1 <- 0:3
J2 <- 3:1
N <- length(J1) + length(J2)
ParamNames <- names(optim)[1:N]
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c(m0, m1, m2, m3)])==0,
J2empty = rowSums(optim[, c(d3, d2, d1)])==0,
RelErr = with(optim,apply((lB - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c(m0, m1, m2, m3)])==0,
J2empty = rowSums(optim[, c(d3, d2, d1)])==0,
RelErr = with(optim,(lB - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
# geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
Data
with(optim,(lB - (1-P))/(1-P))
head(optim)
optim <- optim[-which(apply(optim, 1, function(x)all(is.na(x)))),]
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- optim[-which(apply(optim, 1, function(x)all(is.na(x)))),]
J1 <- 0:3
J2 <- 3:1
N <- length(J1) + length(J2)
ParamNames <- names(optim)[1:N]
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c(m0, m1, m2, m3)])==0,
J2empty = rowSums(optim[, c(d3, d2, d1)])==0,
RelErr = with(optim,(lB - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
head(optim)
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c("m0", "m1", "m2", "m3")])==0,
J2empty = rowSums(optim[, c("d3", "d2", "d1")])==0,
RelErr = with(optim,(lB - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c("m0", "m1", "m2", "m3")])==0,
J2empty = rowSums(optim[, c("d3", "d2", "d1")])==0,
RelErr = with(optim,(lB - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
Data
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
# geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
ggsave(plot, file = "pics/Figure3.pdf", width = 10,height = 5,dpi=300)
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim$bound <- optim$lB
head
head(optim)
?drop
optim <- optim[, -"uB"]
optim <- optim[, -c("uB")]
optim[, "uB"]
optim[, -"uB"]
head(optim)
optim[,14]
optim[, -14]
optim[, -14] %>% head()
optim <- optim[, -14]
head(optim)
names(optim[,13])
names(optim)
z <- names(optim)
z[13] = "bound"
z
z <- names(optim)
z[14] = "bound"
z
z[19] = "lB"
z
names(optim) <- z
head(optim)
ncol(optim)
optim <- optim[,-19]
head(optim)
optim_param
optim_outDist
P
a
m
d
truth
objFun
constFun
save(optim,optim_param,optim_outDist,
P,a,m,d,truth,
objFun,constFun,
file = "data/MaxLogdHorrorDist_TailProb.Rdata")
rm(list=ls())
library(magrittr)
load("data/log_Hill_Horror_dist.Rdata")
a <- as.numeric(quantile(sample,0.8)) # Threshold a for GLP
m <- 0:3
d <- 3:1
d1    = DistributionPty::Dlhorror(a, 1)
d2    = -DistributionPty::Dlhorror(a, 2)
d3    = DistributionPty::Dlhorror(a, 3)
m0 = 1-DistributionPty::Dlhorror(a, 0)
m1 = DistributionPty::UpperTrunclHorrorMoment(a,1, n=1e5)
m2 = DistributionPty::UpperTrunclHorrorMoment(a,2, n=1e5)
m3 = DistributionPty::UpperTrunclHorrorMoment(a,3, n=1e5)
truth  = data.frame(d3,-d2,d1,m0,m1,m2,m3)
truth
d2
d1    = DistributionPty::Dlhorror(a, 1)
d2    = -DistributionPty::Dlhorror(a, 2)
d3    = DistributionPty::Dlhorror(a, 3)
m0 = 1-DistributionPty::Dlhorror(a, 0)
m1 = DistributionPty::UpperTrunclHorrorMoment(a,1, n=1e5)
m2 = DistributionPty::UpperTrunclHorrorMoment(a,2, n=1e5)
m3 = DistributionPty::UpperTrunclHorrorMoment(a,3, n=1e5)
truth  = data.frame(d3,d2,d1,m0,m1,m2,m3)
load("data/log_Hill_data_optimparam.Rdata") # Obtain by running getOptimParam.R
load("data/log_Hill_Horror_dist.Rdata") # Obtain by running getDataFigure1.R
d1    = DistributionPty::Dlhorror(a, 1)
d2    = -DistributionPty::Dlhorror(a, 2)
d3    = DistributionPty::Dlhorror(a, 3)
m0 = 1-DistributionPty::Dlhorror(a, 0)
m1 = DistributionPty::UpperTrunclHorrorMoment(a,1, n=1e5)
m2 = DistributionPty::UpperTrunclHorrorMoment(a,2, n=1e5)
m3 = DistributionPty::UpperTrunclHorrorMoment(a,3, n=1e5)
truth  = data.frame(d3,d2,d1,m0,m1,m2,m3)
save(bootSample,optim_param,truth, designTab, file = "data/log_Hill_data_optimparam.Rdata")
save(optim,optim_param,optim_outDist,
P,a,m,d,truth,
objFun,constFun,
file = "data/MaxLogdHorrorDist_TailProb.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
save(optim,optim_param,optim_outDist,
P,a,m,d,truth,
objFun,constFun,
file = "data/MaxLogdHorrorDist_TailProb.Rdata")
head(optim)
library(latex2exp)
library(ggplot2)
library(magrittr)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- optim[-which(apply(optim, 1, function(x)all(is.na(x)))),]
J1 <- 0:3
J2 <- 3:1
N <- length(J1) + length(J2)
ParamNames <- names(optim)[1:N]
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c("m0", "m1", "m2", "m3")])==0,
J2empty = rowSums(optim[, c("d3", "d2", "d1")])==0,
RelErr = with(optim,(lB - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
# geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c("m0", "m1", "m2", "m3")])==0,
J2empty = rowSums(optim[, c("d3", "d2", "d1")])==0,
RelErr = with(optim,(lB - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
library(latex2exp)
library(ggplot2)
library(magrittr)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- optim[-which(apply(optim, 1, function(x)all(is.na(x)))),]
J1 <- 0:3
J2 <- 3:1
N <- length(J1) + length(J2)
ParamNames <- names(optim)[1:N]
Data <- transform(optim,
nparam = as.factor(rowSums(optim[,1:N])),
J1empty = rowSums(optim[, c("m0", "m1", "m2", "m3")])==0,
J2empty = rowSums(optim[, c("d3", "d2", "d1")])==0,
RelErr = with(optim,(bound - (1-P))/(1-P)),
D  = as.factor(D),
param.inc = apply(optim[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
# geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
ggsave(plot, file = "pics/Figure3.pdf", width = 10,height = 5,dpi=300)
library(plyr)
Table <- ddply(Data, .(P,D), .fun = function(x){
index_min <- which.min(x$RelErr)
row_min <- x[index_min, ]
J2_star <- J2[unlist(row_min[1:length(J2)])] %>% toString()
J1_star <- J1[unlist(row_min[length(J2) + 1:length(J1)])] %>% toString()
if (length(J2_star) ==0) J2_star = ' '
if (length(J1_star) ==0) J2_star = ' '
Z_star <- format(min(row_min$uB,row_min$lB), scientific=TRUE, digits =3)
data.frame(J1 = paste0("{",J1_star,"}"), J2 = paste0("{",J2_star,"}"), Z_star, row_min$RelErr)
})
Table$P <- Table$P*100
names(Table) <- c("P", "D", "J1", "J2","Optimal Objective Value", "Relative Error")
library(xtable)
library(dplyr)
display <- c(rep("d",4), "s","E")
for (p in P*100){
file <- paste0("tables/Transformed_Hill_Horror_TailProb_best_",p,".tex")
table <- subset(Table, p == P)%>% select(-P)
align  <- c(rep("|c",ncol(table)+1),"|")
xtable(table, align = align, digits = 3) %>% print(include.rownames=FALSE, type = "latex",file = file)
# We need to replace the tables by subtables (our way around uses unix commands)
command_1 <- paste0("sed -i '' -- 's/begin{table}\\[ht\\]/begin{subtable}{\\\\textwidth}/g' ",file)
system(command_1)
command_2 <- paste0("sed -i '' -- 's/end{table}/end{subtable}/g' ",file)
system(command_2)
# We need to add the subcaption to the subtables (our way around uses unix commands)
command_3 <- paste0("sed -i '' -- 's/D \\& J1 \\& J2/\\$D\\$ \\& \\$\\\\mathcal J\\_1\\^\\*\\$ \\& \\$\\\\mathcal J\\_2\\^\\*\\$/g' ",file)
system(command_3)
# Make the right column names
command_4 <- paste0("sed -i '' -- 's/end{tabular}/end{tabular}\\\\subcaption{$p = ",p," $}/g' ",file)
system(command_4)
}
Table
library(plyr)
Table <- ddply(Data, .(P,D), .fun = function(x){
index_min <- which.min(x$RelErr)
row_min <- x[index_min, ]
J2_star <- J2[unlist(row_min[1:length(J2)])] %>% toString()
J1_star <- J1[unlist(row_min[length(J2) + 1:length(J1)])] %>% toString()
if (length(J2_star) ==0) J2_star = ' '
if (length(J1_star) ==0) J2_star = ' '
Z_star <- format(bound, scientific=TRUE, digits =3)
data.frame(J1 = paste0("{",J1_star,"}"), J2 = paste0("{",J2_star,"}"), Z_star, row_min$RelErr)
})
library(plyr)
Table <- ddply(Data, .(P,D), .fun = function(x){
index_min <- which.min(x$RelErr)
row_min <- x[index_min, ]
J2_star <- J2[unlist(row_min[1:length(J2)])] %>% toString()
J1_star <- J1[unlist(row_min[length(J2) + 1:length(J1)])] %>% toString()
if (length(J2_star) ==0) J2_star = ' '
if (length(J1_star) ==0) J2_star = ' '
Z_star <- format(row_min$bound, scientific=TRUE, digits =3)
data.frame(J1 = paste0("{",J1_star,"}"), J2 = paste0("{",J2_star,"}"), Z_star, row_min$RelErr)
})
Table$P <- Table$P*100
names(Table) <- c("P", "D", "J1", "J2","Optimal Objective Value", "Relative Error")
Table
library(xtable)
library(dplyr)
display <- c(rep("d",4), "s","E")
for (p in P*100){
file <- paste0("tables/Transformed_Hill_Horror_TailProb_best_",p,".tex")
table <- subset(Table, p == P)%>% select(-P)
align  <- c(rep("|c",ncol(table)+1),"|")
xtable(table, align = align, digits = 3) %>% print(include.rownames=FALSE, type = "latex",file = file)
# We need to replace the tables by subtables (our way around uses unix commands)
command_1 <- paste0("sed -i '' -- 's/begin{table}\\[ht\\]/begin{subtable}{\\\\textwidth}/g' ",file)
system(command_1)
command_2 <- paste0("sed -i '' -- 's/end{table}/end{subtable}/g' ",file)
system(command_2)
# We need to add the subcaption to the subtables (our way around uses unix commands)
command_3 <- paste0("sed -i '' -- 's/D \\& J1 \\& J2/\\$D\\$ \\& \\$\\\\mathcal J\\_1\\^\\*\\$ \\& \\$\\\\mathcal J\\_2\\^\\*\\$/g' ",file)
system(command_3)
# Make the right column names
command_4 <- paste0("sed -i '' -- 's/end{tabular}/end{tabular}\\\\subcaption{$p = ",p," $}/g' ",file)
system(command_4)
}
library(devtools)
library(GLP)
devtools::document()
